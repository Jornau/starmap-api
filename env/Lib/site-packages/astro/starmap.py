from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import create_engine, Column, Integer, String, Float, ForeignKey, or_
from sqlalchemy.orm import sessionmaker, relationship
from astro.converter import to_hours, equinox_datetime, utc_datetime, delta_to_degrees
from datetime import datetime

Base = declarative_base()

class Viewpoint:
    __engine = create_engine('sqlite:///env/db/stars.db')
    __session = sessionmaker(bind=__engine)()

    def __init__(self, latitude, longitude, datetime_now: datetime, timezone):
        self.latitude = latitude
        self.longitude = longitude
        self.datetime_now = datetime_now
        self.timezone = timezone
        self.utc_datetime_now = utc_datetime(datetime_now, timezone)
        self.start_point = equinox_datetime(self.utc_datetime_now)
        self.delta_dt = self.utc_datetime_now - self.start_point
        self.degrees_gone = delta_to_degrees(self.delta_dt, self.longitude)

    def __repr__(self):
        return "<Viewport('%d','%d')" % (self.latitude, self.longitude)

    def visible_stars(self):
        long_h = to_hours(self.degrees_gone)
        min_long = to_hours(self.degrees_gone) - 6
        max_long = to_hours(self.degrees_gone) + 6

        if min_long < 0:
            min_long = 24 + min_long
        if max_long > 24:
            max_long = max_long - 24

        if (min_long > long_h or max_long < long_h):
            temp = self.__session.query(Star).filter(Star.ra < 24, Star.ra > min_long).all()
            temp = temp + self.__session.query(Star).filter(Star.ra > 0, Star.ra < max_long).all()
        else:
            temp = self.__session.query(Star).filter(Star.ra > min_long, Star.ra < max_long).all()

        if self.latitude > 0:
            stars = [x for x in temp if (x.dec > (self.latitude - 90.0))]
        else:
            stars = [x for x in temp if (x.dec < (self.latitude + 90.0))]

        return stars

    def visible_stars_now(self):
        stars = self.visible_stars()
        


class Constellation(Base):

    __tablename__ = "Constellations"

    id = Column(Integer, primary_key=True)
    name_eng = Column(String(50))
    name_rus = Column(String(50))
    abbr_iau = Column(String(5))
    abbr_nasa = Column(String(5))
    area = Column(Integer)

    def __init__(self, name_eng, name_rus, abbr_iau, abbr_nasa, area):
        self.name_eng = name_eng 
        self.name_rus = name_rus 
        self.abbr_iau = abbr_iau 
        self.abbr_nasa = abbr_nasa 
        self.area = area 

    def __repr__(self):
        return "<Constellation('%s','%s', '%s', '%s', '%s')>" % (self.name_eng, self.name_rus, self.abbr_iau, self.abbr_nasa, self.area)

class Star(Base):

    __tablename__ = "Stars"

    id = Column(Integer, primary_key=True)
    hip = Column(Integer, nullable=True)
    hd = Column(Integer, nullable=True)
    hr = Column(Integer, nullable=True)
    flam = Column(Integer, nullable=True)
    gl = Column(String(30), nullable=True)
    bf = Column(String(30), nullable=True)
    spect = Column(String(30), nullable=True)
    bayer = Column(String(30), nullable=True)
    var = Column(String(30), nullable=True)
    name_eng = Column(String(50), nullable=True)
    name_rus = Column(String(50), nullable=True)
    ra = Column(Float)
    dec = Column(Float)
    dist = Column(Float)
    pmra = Column(Float)
    pmdec = Column(Float)
    mag = Column(Float)
    absmag = Column(Float)
    lum = Column(Float)
    rv = Column(Float, nullable=True)
    ci = Column(Float, nullable=True)
    con = Column(Integer, ForeignKey('Constellations.id'), nullable=True)
    con_ent = relationship("Constellation", foreign_keys=con)

    def __init__(self, ra, dec, dist, pmra, pmdec, mag, absmag, lum, hip = None, hd = None, hr = None, gl = None, bf = None,
        name_eng = None, name_rus = None, rv = None, spect = None, ci = None, bayer = None, flam = None, con = None,var = None):
        self.ra = ra 
        self.dec = dec 
        self.dist = dist 
        self.pmra = pmra 
        self.pmdec = pmdec
        self.mag = mag
        self.absmag = absmag
        self.hip = hip
        self.hd = hd
        self.hr = hr
        self.gl = gl
        self.bf = bf
        self.name_eng = name_eng
        self.name_rus = name_rus
        self.rv = rv
        self.spect = spect
        self.ci = ci
        self.bayer = bayer
        self.flam = flam
        self.con = con
        self.var = var
        self.lum = lum
